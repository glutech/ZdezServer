package cn.com.zdez.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import cn.com.zdez.cache.ZdezMsgCache;
import cn.com.zdez.po.ZdezMsg;
import cn.com.zdez.vo.ZdezMsgVo;

public class ZdezMsgDao {

	private SQLExecution sqlE = new SQLExecution();

	public boolean newZdezMsg(ZdezMsg zMsg) {
		boolean flag = false;
		String sql = "insert into zdezMsg (title, content, adminId) values (?,?,?)";
		Object[] params = { zMsg.getTitle(), zMsg.getContent(),
				zMsg.getAdminId() };
		flag = sqlE.execSqlWithoutRS(sql, params);
		return flag;
	}

	public int getLatestZdezMsgId() {
		int i = 0;
		SQLExecution sqlE = new SQLExecution();
		String sql = "select * from zdezMsg order by date desc limit 0,1";
		Object[] params = {};
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while (rs.next()) {
				i = rs.getInt("id");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return i;
	}

	public boolean newZdezMsg_Grade(int zdezMsgId, String[] grade) {
		boolean flag = false;
		// 因为循环插入数据，所有不使用SQLExecution
		PreparedStatement pstmt = null;
		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		Connection conn = null;
		String sql = "insert into zdezMsg_destGrade (zdezMsgId, gradeId) values (?,?)";
		try {
			conn = factory.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, zdezMsgId);
			for (int i = 0, count = grade.length; i < count; i++) {
				flag = false;
				pstmt.setInt(2, Integer.parseInt(grade[i]));
				if (pstmt.executeUpdate() > 0) {
					flag = true;
				}
				if (flag == false) {
					break;
				}
			}
			pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			factory.freeConnection(conn);
		}
		return flag;
	}

	public boolean newZdezMsg_Major(int zdezMsgId, String[] major) {
		boolean flag = false;
		// 因为循环插入数据，所有不使用SQLExecution
		PreparedStatement pstmt = null;
		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		Connection conn = null;
		String sql = "insert into zdezMsg_destMajor (zdezMsgId, majorId) values (?,?)";
		try {
			conn = factory.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, zdezMsgId);
			for (int i = 0, count = major.length; i < count; i++) {
				flag = false;
				pstmt.setInt(2, Integer.parseInt(major[i]));
				if (pstmt.executeUpdate() > 0) {
					flag = true;
				}
				if (flag == false) {
					break;
				}
			}
			pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			factory.freeConnection(conn);
		}
		return flag;
	}

	public boolean newZdezMsg_Receivers(int zdezMsgId, List<Integer> destUsers) {
		boolean flag = false;
		PreparedStatement pstmt = null;
		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		Connection conn = null;
		String sql = "insert into zdezMsg_receivers (zdezMsgId, receiverId) values (?,?)";
		try {
			conn = factory.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, zdezMsgId);
			for (int i = 0, count = destUsers.size(); i < count; i++) {
				flag = false;
				pstmt.setInt(2, destUsers.get(i));
				if (pstmt.executeUpdate() > 0) {
					flag = true;
				}
				if (flag == false) {
					break;
				}
			}
			pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			factory.freeConnection(conn);
		}
		return flag;
	}

	public List<ZdezMsgVo> getZdezMsgAll(List<Integer> zdezMsgIdList) {
		List<ZdezMsgVo> list = new ArrayList<ZdezMsgVo>();
		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "select * from zdezMsg where id = ?";
		try {
			conn = factory.getConnection();
			pstmt = conn.prepareStatement(sql);
			for (int i = 0, count = zdezMsgIdList.size(); i < count; i++) {
				pstmt.setInt(1, zdezMsgIdList.get(i));
				ResultSet rs = pstmt.executeQuery();
				while (rs.next()) {
					ZdezMsgVo zMsgVo = new ZdezMsgVo();
					zMsgVo.setZdezMsgId(rs.getInt("id"));
					zMsgVo.setTitle(rs.getString("title"));
					zMsgVo.setContent(rs.getString("content"));
					zMsgVo.setDate(rs.getString("date").substring(0, 19));
					list.add(zMsgVo);
				}
			}
			pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			factory.freeConnection(conn);
		}
		return list;
	}

	public boolean roll_Back_DestGrade(int latestzdezMsgId) {
		boolean flag = false;
		String sql = "delete from zdezMsg_destGrade where zdezMsgId=?";
		Object[] params = { latestzdezMsgId };
		flag = sqlE.execSqlWithoutRS(sql, params);
		return flag;
	}

	public boolean roll_Back_DestMajor(int latestzdezMsgId) {
		boolean flag = false;
		String sql = "delete from zdezMsg_destMajor where zdezMsgId=?";
		Object[] params = { latestzdezMsgId };
		flag = sqlE.execSqlWithoutRS(sql, params);
		return flag;
	}

	public boolean roll_Back_Receivers(int latestzdezMsgId) {
		boolean flag = false;
		String sql = "delete from zdezMsg_receivers where zdezMsgId=?";
		Object[] params = { latestzdezMsgId };
		flag = sqlE.execSqlWithoutRS(sql, params);
		return flag;
	}

	public boolean roll_Back_ZdezMsg(int latestZdezMsgId) {
		boolean flag = false;
		String sql = "delete from zdezMsg where id=?";
		Object[] params = { latestZdezMsgId };
		flag = sqlE.execSqlWithoutRS(sql, params);
		return flag;
	}

	public boolean roll_Back(int latestZdezMsgId) {
		boolean flag = false;
		if (this.roll_Back_DestGrade(latestZdezMsgId)
				&& this.roll_Back_DestMajor(latestZdezMsgId)
				&& this.roll_Back_Receivers(latestZdezMsgId)
				&& this.roll_Back_ZdezMsg(latestZdezMsgId)) {
			// 回滚过程无错误
			flag = true;
		} else {
			// 回滚过程出错
			// do nothing.
		}
		return flag;
	}

	public synchronized List<ZdezMsgVo> getMsgToUpdate(int stuId) {
		List<ZdezMsgVo> list = new ArrayList<ZdezMsgVo>();

		// 根据用户id获取需要更新的通知id列表
		List<Integer> idList = this.getMsgIdListtoUpdate(stuId);

		// 根据通知id，从缓存或者数据库中取相关数据
		list = new ZdezMsgCache().getZdezMsgFromCache(idList);
		return list;
	}

	public List<Integer> getMsgIdListtoUpdate(int stuId) {
		List<Integer> toReceive = new ArrayList<Integer>();
		List<Integer> received = new ArrayList<Integer>();
		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		Connection conn = null;

		String sqlToReceive = "select zdezMsgId from zdezMsg_receivers where receiverId = ? order by zdezMsgId desc";
		String sqlReceived = "select zdezMsgId from zdezMsg_receivedStu where receivedStuId = ? order by zdezMsgId desc";

		try {
			conn = factory.getConnection();

			// 获取某一学生要接收的通知列表
			pstmt1 = conn.prepareStatement(sqlToReceive);
			pstmt1.setInt(1, stuId);
			ResultSet rsIdToReceive = pstmt1.executeQuery();
			while (rsIdToReceive.next()) {
				toReceive.add(rsIdToReceive.getInt(1));
			}

			// 获取某一学生已接收的通知id列表
			pstmt2 = conn.prepareStatement(sqlReceived);
			pstmt2.setInt(1, stuId);
			ResultSet rsIdReceived = pstmt2.executeQuery();
			while (rsIdReceived.next()) {
				received.add(rsIdReceived.getInt(1));
			}

			toReceive.removeAll(received);

			pstmt1.close();
			pstmt2.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			factory.freeConnection(conn);
		}

		return toReceive;
	}
	
	public void updateZdezMsgReceived(int stuId, List<Integer> zdezMsgIdList) {
		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		PreparedStatement pstmt = null;
		Connection conn = null;
		try {
			conn = factory.getConnection();
			String sql = "insert into zdezMsg_receivedStu (zdezMsgId, receivedStuId) values (?,?);";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(2, stuId);
			for(int i=0, count=zdezMsgIdList.size(); i<count; i++) {
				pstmt.setInt(1, zdezMsgIdList.get(i));
				pstmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			factory.freeConnection(conn);
		}
	}

}
