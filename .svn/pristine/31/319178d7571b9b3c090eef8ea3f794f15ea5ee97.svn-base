package cn.com.zdez.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import redis.clients.jedis.Jedis;

import cn.com.zdez.po.SchoolAdmin;
import cn.com.zdez.po.SchoolMsg;
import cn.com.zdez.vo.SchoolMsgVo;

public class SchoolMsgDao {

	private SQLExecution sqlE = new SQLExecution();

	/**
	 * 学校发送信息时向表schoolMsg表中插入一条记录
	 * 
	 * @param msg
	 * @return true or false
	 */
	public boolean newSchoolMsg(SchoolMsg msg) {
		boolean flag = false;
		String sql = "insert into schoolMsg (title, content, schoolAdminId) values(?,?,?)";
		Object[] params = { msg.getTitle(), msg.getContent(),
				msg.getSchoolAdminUsername() };
		flag = sqlE.execSqlWithoutRS(sql, params);
		return flag;
	}

	/**
	 * 获取最新一条信息记录的id
	 * 
	 * @return latest schoolMsg Id
	 */
	public int getLatestSchoolMsgId() {
		int id = 0;
		SQLExecution sqlE = new SQLExecution();
		String sql = "select * from schoolMsg order by date desc limit 0,1";
		Object[] params = {};
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while (rs.next()) {
				id = rs.getInt("id");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return id;
	}

	/**
	 * 学校发送信息时向表schoolMsg_destGrade插入记录 用于记录该信息是发送给哪些年级的
	 * 
	 * @param schoolMsgId
	 * @param grade
	 * @return true or false
	 */
	public boolean newSchoolMsg_Grade(int schoolMsgId, String[] grade) {
		boolean flag = false;
		// 因为循环插入数据，所有不使用SQLExecution
		PreparedStatement pstmt = null;
		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		Connection conn = null;
		String sql = "insert into schoolMsg_destGrade (schoolMsgId, gradeId) values (?,?)";
		try {
			conn = factory.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, schoolMsgId);
			for (int i = 0, count = grade.length; i < count; i++) {
				flag = false;
				pstmt.setInt(2, Integer.parseInt(grade[i]));
				if (pstmt.executeUpdate() > 0) {
					flag = true;
				}
				if (flag == false) {
					break;
				}
			}
			pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			factory.freeConnection(conn);
		}
		return flag;
	}

	/**
	 * 学校发送信息时向表schoolMsg_destMajor中插入记录 用于记录该信息是发送给哪些专业的
	 * 
	 * @param schoolMsgId
	 * @param major
	 * @return true or false
	 */
	public boolean newSchoolMsg_Major(int schoolMsgId, String[] major) {
		boolean flag = false;
		// 因为循环插入数据，所有不使用SQLExecution
		PreparedStatement pstmt = null;
		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		Connection conn = null;
		String sql = "insert into schoolMsg_destMajor (schoolMsgId, majorId) values (?,?)";
		try {
			conn = factory.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, schoolMsgId);
			for (int i = 0, count = major.length; i < count; i++) {
				flag = false;
				pstmt.setInt(2, Integer.parseInt(major[i]));
				if (pstmt.executeUpdate() > 0) {
					flag = true;
				}
				if (flag == false) {
					break;
				}
			}
			pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			factory.freeConnection(conn);
		}
		return flag;
	}

	/**
	 * 学校发送信息时向表schoolMsg_receivers中插入记录 用于记录该信息是发送给哪些学生（老师）的
	 * 
	 * @param schoolMsgId
	 * @param destUsers
	 * @return true or false
	 */
	public boolean newSchoolMsg_Receivers(int schoolMsgId,
			List<Integer> destUsers) {
		boolean flag = false;
		PreparedStatement pstmt = null;
		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		Connection conn = null;
		String sql = "insert into schoolMsg_receivers (schoolMsgId, receiverId) values (?,?)";
		try {
			conn = factory.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, schoolMsgId);
			for (int i = 0, count = destUsers.size(); i < count; i++) {
				flag = false;
				pstmt.setInt(2, destUsers.get(i));
				if (pstmt.executeUpdate() > 0) {
					flag = true;
				}
				if (flag == false) {
					break;
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			factory.freeConnection(conn);
		}
		return flag;
	}

	/**
	 * 发送信息过程出现错误时（一般是数据库异常），将整个发送过程回滚，使数据库恢复到未发送信息之前的状态
	 * 
	 * @param latestSchoolMsgId
	 * @return true or false
	 */
	public boolean roll_Back(int latestSchoolMsgId) {
		boolean flag = false;
		if (this.roll_Back_DestGrade(latestSchoolMsgId)
				&& this.roll_Back_DestMajor(latestSchoolMsgId)
				&& this.roll_Back_Receivers(latestSchoolMsgId)
				&& this.roll_Back_SchoolMsg(latestSchoolMsgId)) {
			// 回滚过程无错误
			flag = true;
		} else {
			// 回滚过程出错
			// do nothing.
		}
		return flag;
	}

	/**
	 * 发送信息过程出现错误时，删除此次发送过程中已插入表schoolMsg中但实际无效的数据
	 * 
	 * @param latestSchoolMsgId
	 * @return true or false
	 */
	public boolean roll_Back_SchoolMsg(int latestSchoolMsgId) {
		boolean flag = false;
		String sql = "delete from schoolMsg where id=?";
		Object[] params = { latestSchoolMsgId };
		flag = sqlE.execSqlWithoutRS(sql, params);
		return flag;
	}

	/**
	 * 发送信息过程出现错误时，删除此次发送过程中已插入表schoolMsg_destGrade中但实际无效的数据
	 * 
	 * @param latestSchoolMsgId
	 * @return true or false
	 */
	public boolean roll_Back_DestGrade(int latestSchoolMsgId) {
		boolean flag = false;
		String sql = "delete from schoolMsg_destGrade where schoolMsgId=?";
		Object[] params = { latestSchoolMsgId };
		flag = sqlE.execSqlWithoutRS(sql, params);
		return flag;
	}

	/**
	 * 发送信息过程出现错误时，删除此次发送过程中已插入表schoolMsg_destMajor中但实际无效的数据
	 * 
	 * @param latestSchoolMsgId
	 * @return true or false
	 */
	public boolean roll_Back_DestMajor(int latestSchoolMsgId) {
		boolean flag = false;
		String sql = "delete from schoolMsg_destMajor where schoolMsgId=?";
		Object[] params = { latestSchoolMsgId };
		flag = sqlE.execSqlWithoutRS(sql, params);
		return flag;
	}

	/**
	 * 发送信息过程出现错误时，删除此次发送过程中已插入表schoolMsg_receivers中但实际无效的数据
	 * 
	 * @param latestSchoolMsgId
	 * @return true or false
	 */
	public boolean roll_Back_Receivers(int latestSchoolMsgId) {
		boolean flag = false;
		String sql = "delete from schoolMsg_receivers where schoolMsgId=?";
		Object[] params = { latestSchoolMsgId };
		flag = sqlE.execSqlWithoutRS(sql, params);
		return flag;
	}

	/**
	 * 获得所有通知的条数，公司管理员使用
	 * 
	 * @param
	 * @return
	 */
	public int getSchoolMsgCount() {
		int i = -1;
		String sql = "select count(*) from schoolMsg";
		Object[] params = {};
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while (rs.next()) {
				i = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return i;
	}

	/**
	 * 获取某一学校管理员发送通知的数量
	 * 
	 * @param sAdmin
	 * @return
	 */
	public int getSchoolMsgCount(SchoolAdmin sAdmin) {
		int i = -1;
		String sql = "select count(*) from schoolMsg where schoolAdminId=?";
		Object[] params = { sAdmin.getUsername() };
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while (rs.next()) {
				i = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return i;
	}

	/**
	 * 获取某一学校管理员查询的发送消息的数量
	 * 
	 * @param sAdmin
	 * @param keyword
	 * @return
	 */
	public int getSchoolMsgQueryCount(SchoolAdmin sAdmin, String keyword) {
		int i = -1;
		String sql = "select count(*) from schoolMsg where schoolAdminId='" + sAdmin.getUsername() +"' and title like '%" + keyword + "%'";
		Object[] params = {};
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while (rs.next()) {
				i = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return i;
	}
	
	/**
	 * 获取学校管理员发送消息的数量，公司管理员查询时用
	 * @param keyword
	 * @return
	 */
	public int getSchoolMsgQueryCount(String keyword) {
		int i=-1;
		String sql = "select count(*) from schoolMsg where title like '%" + keyword + "%'";
		Object[] params = {};
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while(rs.next()) {
				i = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return i;
	}

	/**
	 * 公司管理员使用，根据分页的页码获取要现实在该页的通知ID List
	 * 
	 * @param start
	 * @param end
	 * @return
	 */
	public List<Integer> getSchoolMsgIdList(int start, int end) {
		List<Integer> list = new ArrayList<Integer>();
		String sql = "select id from schoolMsg order by date desc limit ?,?";
		Object[] params = { start, end };
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while (rs.next()) {
				list.add(rs.getInt("id"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 学校管理员使用，根据分页与管理员身份获取某一页面需要显示的通知ID List
	 * 
	 * @param start
	 * @param end
	 * @param sAdmin
	 * @return
	 */
	public List<Integer> getSchoolMsgIdList(int start, int end,
			SchoolAdmin sAdmin) {
		List<Integer> list = new ArrayList<Integer>();
		String sql = "select id from schoolMsg where schoolAdminId = ? order by date desc limit ?,?";
		Object[] params = { sAdmin.getUsername(), start, end };
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while (rs.next()) {
				list.add(rs.getInt("id"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 学校管理员使用，根据分页、管理员身份和查询的关键字获取某一页面需要显示的通知ID List
	 * 
	 * @param start
	 * @param end
	 * @param sAdmin
	 * @return
	 */
	public List<Integer> getSchoolMsgIdList(int start, int end,
			SchoolAdmin sAdmin, String keyword) {
		List<Integer> list = new ArrayList<Integer>();
		String sql = "select id from schoolMsg where schoolAdminId = '"+ sAdmin.getUsername() +"' and title like '%"+ keyword +"%' order by date desc limit "+ start +","+ end +"";
		Object[] params = {};
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while (rs.next()) {
				list.add(rs.getInt("id"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}
	
	/**
	 * 公司管理员使用，根据分页和搜索关键字获得要显示的通知ID list， 搜索时使用
	 * @param start
	 * @param end
	 * @param keyword
	 * @return
	 */
	public List<Integer> getSchoolMsgIdList(int start, int end, String keyword) {
		List<Integer> list = new ArrayList<Integer>();
		String sql = "select id from schoolMsg where title like '%"+ keyword +"%' order by date desc limit "+ start +","+ end +"";
		Object[] params = {};
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while(rs.next()) {
				list.add(rs.getInt("id"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 通过通知id列表获取通知的详细信息
	 * 
	 * @param schoolMsgIdList
	 * @return
	 */
	public List<SchoolMsgVo> getSchoolMsgAll(List<Integer> schoolMsgIdList) {
		List<SchoolMsgVo> list = new ArrayList<SchoolMsgVo>();

		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		PreparedStatement pstmt = null;
		Connection conn = null;

		try {
			conn = factory.getConnection();
			for (int i = 0, count = schoolMsgIdList.size(); i < count; i++) {
				SchoolMsgVo sMsgVo = new SchoolMsgVo();

				// get schoolMsg basic info
				String sqlGetMsgInfo = "select schoolMsg.id, schoolMsg.title, schoolMsg.content, schoolMsg.date, "
						+ "schoolAdmin.name as schoolAdminName, school.name as schoolName "
						+ "from schoolMsg, schoolAdmin, school where schoolAdmin.username = schoolMsg.schoolAdminId "
						+ "and schoolAdmin.schoolId = school.id and schoolMsg.id = ?";
				pstmt = conn.prepareStatement(sqlGetMsgInfo);
				pstmt.setInt(1, schoolMsgIdList.get(i));
				ResultSet rsMsgInfo = pstmt.executeQuery();
				while (rsMsgInfo.next()) {
					sMsgVo.setSchoolMsgId(rsMsgInfo.getInt("id"));
					sMsgVo.setTitle(rsMsgInfo.getString("title"));
					sMsgVo.setContent(rsMsgInfo.getString("content"));
					sMsgVo.setDate(rsMsgInfo.getString("date").substring(0, 19));
					sMsgVo.setSchoolName(rsMsgInfo.getString("schoolAdminName"));
					sMsgVo.setSenderName(rsMsgInfo.getString("schoolName"));
				}

				// get destGrade
				String sqlGetGrade = "select distinct(grade.description) as grade from grade, schoolMsg_destGrade "
						+ "where grade.id = schoolMsg_destGrade.gradeId and schoolMsg_destGrade.schoolMsgId = ?";
				pstmt = conn.prepareStatement(sqlGetGrade);
				pstmt.setInt(1, schoolMsgIdList.get(i));
				ResultSet rsGrade = pstmt.executeQuery();
				List<String> destGrade = new ArrayList<String>();
				while (rsGrade.next()) {
					destGrade.add(rsGrade.getString("grade"));
				}
				sMsgVo.setDestGrade(destGrade);

				// get destDepartment
				String sqlGetDepartment = "select distinct(department.name) as department from department, schoolMsg_destMajor, "
						+ "major where department.id = any(select departmentId from major "
						+ "where id = any(select majorId from schoolMsg_destMajor where schoolMsg_destMajor.schoolMsgId = ?))";
				pstmt = conn.prepareStatement(sqlGetDepartment);
				pstmt.setInt(1, schoolMsgIdList.get(i));
				ResultSet rsDepartment = pstmt.executeQuery();
				List<String> destDepartment = new ArrayList<String>();
				while (rsDepartment.next()) {
					destDepartment.add(rsDepartment.getString("department"));
				}
				sMsgVo.setDestDepartment(destDepartment);

				// get destMajor
				String sqlGetMajor = "select distinct(major.name) as major from major, schoolMsg_destMajor "
						+ "where major.id = schoolMsg_destMajor.majorId and schoolMsg_destMajor.schoolMsgId = ?";
				pstmt = conn.prepareStatement(sqlGetMajor);
				pstmt.setInt(1, schoolMsgIdList.get(i));
				ResultSet rsMajor = pstmt.executeQuery();
				List<String> destMajor = new ArrayList<String>();
				while (rsMajor.next()) {
					destMajor.add(rsMajor.getString("major"));
				}
				sMsgVo.setDestMajor(destMajor);
				
				//get receivedNum
				String sqlReceivedNum = "select count(*) from schoolMsg_receivedStu where schoolMsgId = ?";
				pstmt = conn.prepareStatement(sqlReceivedNum);
				pstmt.setInt(1, schoolMsgIdList.get(i));
				ResultSet rsReceivedNum = pstmt.executeQuery();
				sMsgVo.setReceivedNum(0);
				while(rsReceivedNum.next()) {
					sMsgVo.setReceivedNum(rsReceivedNum.getInt(1));
				}
				
				//get receiverNum
				String sqlReceiverNum = "select count(*) from schoolMsg_receivers where schoolMsgId = ?";
				pstmt = conn.prepareStatement(sqlReceiverNum);
				pstmt.setInt(1, schoolMsgIdList.get(i));
				ResultSet rsReceiverNum = pstmt.executeQuery();
				while(rsReceiverNum.next()) {
					sMsgVo.setReceiverNum(rsReceiverNum.getInt(1));
				}
				
				list.add(sMsgVo);
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		} finally {
			factory.freeConnection(conn);
		}
		return list;
	}

	/**
	 * 根据通知id获得通知的目的年级
	 * 
	 * @param schoolMsgId
	 * @return
	 */
	public List<Integer> getGradeIdListByMsgId(int schoolMsgId) {
		List<Integer> list = new ArrayList<Integer>();
		String sql = "select distinct(gradeId) from schoolMsg_destGrade where schoolMsgId=?";
		Object[] params = { schoolMsgId };
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while (rs.next()) {
				int temp = rs.getInt("gradeId");
				list.add(temp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 根据通知id获得通知的目的专业
	 * 
	 * @param schoolMsgId
	 * @return
	 */
	public List<Integer> getMajorIdListByMsgId(int schoolMsgId) {
		List<Integer> list = new ArrayList<Integer>();
		String sql = "select distinct(majorId) from schoolMsg_destMajor where schoolMsgId=?";
		Object[] params = { schoolMsgId };
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while (rs.next()) {
				int temp = rs.getInt("majorId");
				list.add(temp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 根据通知id获取接受者列表
	 * 
	 * @param schoolMsgId
	 * @return
	 */
	public List<Integer> getDestUsersListByMsgId(int schoolMsgId) {
		List<Integer> list = new ArrayList<Integer>();
		String sql = "select * from schoolMsg_receivers where schoolMsgId=?";
		Object[] params = { schoolMsgId };
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while (rs.next()) {
				list.add(rs.getInt("receiverId"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 通过stuId获取该学生要接收的通知id列表
	 * 
	 * @param stuId
	 * @return
	 */
	public List<Integer> getMsgIdListtoUpdate(int stuId) {
		List<Integer> toReceive = new ArrayList<Integer>();
		List<Integer> received = new ArrayList<Integer>();
		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		Connection conn = null;

		String sqlToReceive = "select schoolMsgId from schoolMsg_receivers where receiverId = ? order by schoolMsgId desc";
		String sqlReceived = "select schoolMsgId from schoolMsg_receivedStu where receivedStuId = ? order by schoolMsgId desc";

		try {
			conn = factory.getConnection();

			// 获取某一学生要接收的通知列表
			pstmt1 = conn.prepareStatement(sqlToReceive);
			pstmt1.setInt(1, stuId);
			ResultSet rsIdToReceive = pstmt1.executeQuery();
			while (rsIdToReceive.next()) {
				toReceive.add(rsIdToReceive.getInt(1));
			}

			// 获取某一学生已接收的通知id列表
			pstmt2 = conn.prepareStatement(sqlReceived);
			pstmt2.setInt(1, stuId);
			ResultSet rsIdReceived = pstmt2.executeQuery();
			while (rsIdReceived.next()) {
				received.add(rsIdReceived.getInt(1));
			}

			toReceive.removeAll(received);
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			factory.freeConnection(conn);
		}

		return toReceive;
	}

	/**
	 * 根据用户id获取需要更新的通知
	 * 
	 * @param stuId
	 * @return
	 */
	public synchronized List<SchoolMsgVo> getMsgToUpdate(int stuId) {
		List<SchoolMsgVo> list = new ArrayList<SchoolMsgVo>();

		// 根据用户id获取需要更新的通知id列表
		List<Integer> idList = this.getMsgIdListtoUpdate(stuId);

		// 根据通知id，从缓存或者数据库中取相关数据
		Jedis jedis = new RedisConnection().getConnection();
		for (int i = 0, count = idList.size(); i < count; i++) {
			int schoolMsgId = idList.get(i);
			if (jedis.sismember("schoolMsg:idList",
					Integer.toString(schoolMsgId))) {
				// 缓存中有通知的具体内容，从缓存中取
				SchoolMsgVo sMsgVo = new SchoolMsgVo();
				sMsgVo.setSchoolMsgId(idList.get(i));
				List<String> temp = new ArrayList<String>();

				// 获取title
				temp = jedis.hmget(
						"schoolMsg:" + Integer.toString(schoolMsgId), "title");
				for (int q = 0, count1 = temp.size(); q < count1; q++) {
					sMsgVo.setTitle(temp.get(q));
				}
				
				//获取cover路径
				temp = jedis.hmget("schoolMsg:" + Integer.toString(schoolMsgId), "cover");
				for(int q=0, count1=temp.size(); q < count1; q++) {
					sMsgVo.setCoverPath(temp.get(q));
				}

				// 获取content
				temp = jedis
						.hmget("schoolMsg:" + Integer.toString(schoolMsgId),
								"content");
				for (int q = 0, count1 = temp.size(); q < count1; q++) {
					sMsgVo.setContent(temp.get(q));
				}

				// 获取date
				temp = jedis.hmget(
						"schoolMsg:" + Integer.toString(schoolMsgId), "date");
				for (int q = 0, count1 = temp.size(); q < count1; q++) {
					sMsgVo.setDate(temp.get(q));
				}

				// 获取schoolName
				temp = jedis.hmget(
						"schoolMsg:" + Integer.toString(schoolMsgId),
						"schoolName");
				for (int q = 0, count1 = temp.size(); q < count1; q++) {
					sMsgVo.setSchoolName(temp.get(q));
				}

				// 获取senderName
				temp = jedis.hmget(
						"schoolMsg:" + Integer.toString(schoolMsgId),
						"senderName");
				for (int q = 0, count1 = temp.size(); q < count1; q++) {
					sMsgVo.setSenderName(temp.get(q));
				}

				// 获取目的年级
				Set<String> gradeSet = jedis.smembers("destGrade:21");
				temp = new ArrayList<String>();
				for (String grade : gradeSet) {
					temp.add(grade);
				}
				sMsgVo.setDestGrade(temp);

				// 获取目的学院
				Set<String> departmentSet = jedis.smembers("destDepartment:21");
				temp = new ArrayList<String>();
				for (String department : departmentSet) {
					temp.add(department);
				}
				sMsgVo.setDestGrade(temp);

				// 获取目的专业
				Set<String> majorSet = jedis.smembers("destMajor:21");
				temp = new ArrayList<String>();
				for (String major : majorSet) {
					temp.add(major);
				}
				sMsgVo.setDestGrade(temp);

				list.add(sMsgVo);
			} else {
				// 缓存中没有通知的具体内容，从数据库中取
				//System.out.println(schoolMsgId);
				System.out.println("no info in cache. get it from DB please!");
			}
		}
		return list;
	}
	
	public boolean updateStatistics(int stuId) {
		boolean flag = false;
		
		return flag;
	}
	
	/**
	 * 通过通知id获得通知内容
	 * @param schoolMsgId
	 * @return
	 */
	public SchoolMsg getSchoolMsgById(int schoolMsgId) {
		SchoolMsg sMsg = new SchoolMsg();
		String sql = "select * from schoolMsg where id=?";
		Object[] params = { schoolMsgId };
		ResultSet rs = sqlE.execSqlWithRS(sql, params);
		try {
			while(rs.next()) {
				sMsg.setId(rs.getInt("id"));
				sMsg.setTitle(rs.getString("title"));
				sMsg.setContent(rs.getString("content"));
				sMsg.setDate(rs.getString("date"));
				sMsg.setSchoolAdminUsername(rs.getString("schoolAdminId"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return sMsg;
	}
	
	/**
	 * 根据客户端返回的学生id和已收到的通知id列表，更新schoolMsg_received表
	 * @param stuId
	 * @param schoolMsgIdList
	 */
	public void updateSchoolMsgReceived(int stuId, List<Integer> schoolMsgIdList) {
		ConnectionFactory factory = ConnectionFactory.getInstatnce();
		PreparedStatement pstmt = null;
		Connection conn = null;
		try {
			conn = factory.getConnection();
			String sql = "insert into schoolMsg_receivedStu (schoolMsgId, receivedStuId) values (?,?);";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(2, stuId);
			for(int i=0, count=schoolMsgIdList.size(); i<count; i++) {
				pstmt.setInt(1, schoolMsgIdList.get(i));
				pstmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			factory.freeConnection(conn);
		}
	}
	
}
